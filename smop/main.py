# SMOP compiler -- Simple Matlab/Octave to Python compiler
# Copyright 2011-2013 Victor Leikehman

import sys
import os
import re
from optparse import OptionParser
import parse
import resolve
import backend
import rewrite

version = '0.23'


def main():
    op = OptionParser(description='SMOP compiler version %s' % version,
                      usage='Usage: %prog [options] file-list')
    op.add_option('-o', '--output', type=str, default='-', metavar='FILENAME',
                  help='Output file name. Defaults to stdout')
    op.add_option('-X', '--exclude', type=str, default='', metavar='FILES',
                  help='Ignore files listed in comma-separated list FILES')
    op.add_option('--strict', action='store_true',
                  help='Stop on the first error')
    op.add_option('--verbose', action='store_true')
    op.add_option('--version', action='store_true')
    op.add_option('--no-comments', action='store_false', dest='with_comments',
                  default=True, help='Strip comments')
    op.add_option('--resolve', action='store_true', dest='do_resolve',
                  default=True, help='Apply the "resolve" pass [True]')
    op.add_option('--no-resolve', action='store_false', dest='do_resolve',
                  default=True)
    op.add_option('--rewrite', action='store_true', dest='do_rewrite',
                  default=False, help='Apply the "rewrite" pass [False]')
    op.add_option('--no-rewrite', action='store_false', dest='do_rewrite',
                  default=False)
    op.add_option('--typeof', action='store_true', dest='do_typeof',
                  default=False, help='Apply the "typeof" pass [False]')
    op.add_option('--no-typeof', action='store_false', dest='do_typeof',
                  default=False)
    opts, args = op.parse_args()

    if opts.version:
        print "SMOP compiler version %s" % version
        sys.exit()

    exclude_list = opts.exclude.split(',')

    fp = open(opts.output, "w") if opts.output != "-" else sys.stdout
    print >> fp, "# Autogenerated with SMOP version %s" % version
    print >> fp, "# " + " ".join(sys.argv)
    print >> fp, "from __future__ import division"
    print >> fp, "import numpy as np"
    print >> fp, "from scipy.io import loadmat,savemat"
    print >> fp, "import os\n"

    for filename in args:
        if not filename.endswith(".m"):
            print >>sys.stderr, "Ignored file: '%s'" % filename
            continue
        if os.path.basename(filename) in exclude_list:
            print >>sys.stderr, "Excluded file: '%s'" % filename
            continue
        print >>sys.stderr, "Processing file: '%s'" % filename
        buf = open(filename).read()

        # move each comment alone on a line
        # to avoid errors by trailing comment
        # and minimally change parsing rules
        buf = re.sub("%", "\n %", buf)

        func_list = parse.parse(buf if buf[-1] == '\n' else buf + '\n',
                                opts.with_comments)

        try:
            symtab = {}
            for func_obj in func_list:
                try:
                    func_name = func_obj.head.ident.name
                    symtab[func_name] = func_obj
                    print >>sys.stderr, "\t", func_name
                except AttributeError as e:
                    if opts.verbose:
                        print >>sys.stderr, "\tIgnored: %s" % e
                    if opts.strict:
                        return
                    continue
                if opts.do_resolve:
                    resolve.resolve(func_obj)

            if opts.do_typeof:
                for func_obj in func_list:
                    func_obj.apply([], symtab)

            if opts.do_rewrite:
                for func_obj in func_list:
                    rewrite.rewrite(func_obj)

            for func_obj in func_list:
                s = backend.backend(func_obj)
                print >>fp, s
        except Exception as ex:
            print >>sys.stderr, repr(ex)
            if opts.strict:
                return


if __name__ == "__main__":
    main()
